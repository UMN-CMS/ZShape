#include "TFile.h"
#include "TBranch.h"
#include "TTree.h"
#include <unordered_map>

class ZEffTree {
    public:

        ZEffTree(TFile& f, bool writable) : m_file(f) { 
            makeBranches(writable); 
        }

        struct ZInfo {
            float eta[2];
            float phi[2];
            float pt[2];
            float mz, yz, qtz;
        } gen, reco;

        //std::map<std::string, bool> m_cutMap;

        void Fill() { 
            m_tree->Fill();
        }

        void Write() { 
            m_file.Write();
        }

        int Entries() { 
            return m_tree->GetEntries(); 
        }

        bool GetNextEvent() {
            if (nevt==Entries()) {
                return false; 
            }
            m_tree->GetEntry(nevt); 
            nevt++; 
            return true; 
        }

        void Clear() { 
            gen.eta[0] = 0; gen.eta[1] = 0; gen.phi[0] = 0; gen.phi[1] = 0; gen.pt[0] = 0; gen.pt[1] = 0; gen.mz = 0; gen.yz = 0; gen.qtz = 0;
            reco.eta[0] = 0; reco.eta[1] = 0; reco.phi[0] = 0; reco.phi[1] = 0; reco.pt[0] = 0; reco.pt[1] = 0; reco.mz = 0; reco.yz = 0; reco.qtz = 0;
        }

    private:
        TFile& m_file;
        TTree* m_tree;
        int nevt;
        TBranch* br_gen, *br_reco;

        void makeBranches(bool writable) {
            nevt=0;
            if (writable) {
                m_file.cd();
                m_tree=new TTree("ZEffs","Minnesota ZEffs");
                br_gen=m_tree->Branch("gen",&gen,"eta0/f:eta1:phi0:phi1:pt0:pt1:mz:yz:qtz");
                br_reco=m_tree->Branch("reco",&reco,"eta0/f:eta1:phi0:phi1:pt0:pt1:mz:yz:qtz");
            } else {
                m_tree=(TTree*)m_file.Get("ZEffs");
                m_tree->SetBranchAddress("gen",&gen);
                m_tree->SetBranchAddress("reco",&reco);
            }
        }

        /* Bit packing code*/
        int m_bitbox;

        void clearBits() {
            m_bitbox = 0;
        }

        void setBit(int bitnum, bool val) {
            int mask = 1 << bitnum;
            m_bitbox = val ? (m_bitbox | mask) : (m_bitbox & ~mask);    
        };

        bool readBit(int bitnum) const {
            int mask = 1 << bitnum;
            return m_bitbox & mask;
        };

        void flipBit(int bitnum) {
            int mask = 1 << bitnum;
            m_bitbox ^= mask;
        };

        void clearBit(int bitnum) {
            setBit(bitnum, false);
        };

        /* Map from names to bitnums  */
        std::map<std::string, int> cutToBits;

        int cutToBit(const std::string& cut){

        };

        cutToBits["Supercluster-Eta"] = 0;
        cutToBits["GsfTrack-EtaDet"] = 1;
        cutToBits["Iso-Pt"] = 2;
        cutToBits["ElectronId-EtaDet"] = 3;
        cutToBits["HLT-EtaDet"] = 4;
        cutToBits["HFElectronId-EtaDet"] = 5;
        cutToBits["HFSuperCluster-Et"] = 6;
        cutToBits["HFTigh tElectronId-EtaDet"] = 7;
        cutToBits["EID95"] = 8;
        cutToBits["ISO95"] = 9;
        cutToBits["EID90"] = 10;
        cutToBits["ISO90"] = 11;
        cutToBits["EID85"] = 12;
        cutToBits["ISO85"] = 13;
        cutToBits["EID80"] = 14;
        cutToBits["ISO80"] = 15;
        cutToBits["EID70"] = 16;
        cutToBits["ISO70"] = 17;
        cutToBits["EID60"] = 18;
        cutToBits["ISO60"] = 19;
        cutToBits["HLT-GSF"] = 20;
        cutToBits["ISO80Only"] = 21;
        cutToBits["ISO80Conv"] = 22;
        cutToBits["EID80Only"] = 23;
        cutToBits["EID80Conv"] = 24;
        cutToBits["WP95"] = 25;
        cutToBits["WP90"] = 26;
        cutToBits["WP85"] = 27;
        cutToBits["WP80"] = 28;
        cutToBits["NTLooseElectronId-EtaDet"] = 29;
        cutToBits["NTTightElectronId-EtaDet"] = 30;

        /*            passProbeCandTags = cms.untracked.VInputTag(cms.InputTag("theSuperClusters"),cms.InputTag("theGsfElectrons"),cms.InputTag("theIsolation"),cms.InputTag("theId"),cms.InputTag("theHLT"), cms.InputTag("HFElectronID"), cms.InputTag("theHFSuperClusters"), cms.InputTag("HFElectronIDTight"), cms.InputTag("ElectronID95"), cms.InputTag("Iso95"), cms.InputTag("ElectronID90"), cms.InputTag("Iso90"), cms.InputTag("ElectronID85"), cms.InputTag("Iso85"), cms.InputTag("ElectronID80"), cms.InputTag("Iso80"), cms.InputTag("ElectronID70"), cms.InputTag("Iso70"), cms.InputTag("ElectronID60"), cms.InputTag("Iso60"), cms.InputTag("theHLTGsf"), cms.InputTag("Iso80Only"), cms.InputTag("Iso80WConv"), cms.InputTag("ElectronID80Only"), cms.InputTag("ElectronID80WConv"), cms.InputTag("ElectronID95"),cms.InputTag("ElectronID90"),cms.InputTag("ElectronID85"),cms.InputTag("ElectronID80"),cms.InputTag("NTElecLoose"),cms.InputTag("NTElecTight") */

};
